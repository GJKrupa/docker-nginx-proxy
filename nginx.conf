error_log /dev/stdout debug;

env PROXY_SERVICE_HOST;
env PROXY_SERVICE_PORT;
env ENABLE_UUID_PARAM;

http {

    include  /usr/local/openresty/naxsi/*.rules ;

    lua_package_path 'conf/?.lua;;';

    # Sample logging format that supports
    log_format levlogging '$real_client_ip_if_set$remote_addr - $remote_user [$time_local] '
                          '"$request"$uuid_log_opt $status $bytes_sent '
                          '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    access_log /dev/stdout levlogging;

    server {
        # Optionally listen to proxy protocol:
        include  /usr/local/openresty/nginx/conf/nginx_listen.conf ;

        # These should be volume added:
        ssl_certificate     /etc/keys/crt;
        ssl_certificate_key /etc/keys/key;

        server_name proxy;

        set $proxy_address "";
        rewrite_by_lua '
            local proxy_address = _G.proxy_address
            if proxy_address == nil then
                local proxy_host = os.getenv("PROXY_SERVICE_HOST")
                if proxy_host == nil then
                    ngx.log(ngx.ALERT, "PROXY_SERVICE_HOST is empty.")
                    proxy_host = localhost
                end
                local proxy_port = os.getenv("PROXY_SERVICE_PORT")
                if proxy_port == nil then
                    ngx.log(ngx.ALERT, "PROXY_SERVICE_PORT is empty.")
                    proxy_port = 8080
                end
                proxy_address = proxy_host .. ":" .. proxy_port
            end
            ngx.var.proxy_address = proxy_address
        ';

        set $uuid_log_opt '';
        # Example of generating unique ID for use in logs for passing onto applications
        set_by_lua $uuidopt '
            if os.getenv("ENABLE_UUID_PARAM") == "FALSE" then
                return "";
            else
                local socket = require("socket")
                local uuid = require("uuid")
                uuid.randomseed(socket.gettime()*10000)
                local uuid_str = uuid()
                ngx.var.uuidopt = uuid_str
                ngx.var.uuid_log_opt = " nginxId=" .. uuid_str
                local uuid_opt = "&nginxId=" .. uuid_str
                return uuid_opt
            end ';
        set $args $args$uuidopt;

        error_page 500 501 502 503 504 /50x.html;
        location /50x.html {
            root /usr/local/openresty/nginx/html;
            allow all;
            internal;
        }

        location /RequestDenied {
            return 418;
        }

        location / {
            include  /usr/local/openresty/naxsi/location/*.rules ;

            proxy_pass http://$proxy_address;
            proxy_redirect  off;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors on;
        }
    }
}
events {
}
